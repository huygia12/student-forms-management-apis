generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  adminId       String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  password      String
  avatar        String?        @default("default-avatar.jpg")
  username      String         @db.VarChar(255)
  email         String         @unique(map: "email_unique")
  refreshTokens String[]       @default([])
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  deletedAt     DateTime?      @db.Timestamptz(6)
  PersonalForm  PersonalForm[]
}

model Category {
  categoryId   String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title        String
  PersonalForm PersonalForm[]
}

model Field {
  fieldId        String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String       @db.VarChar(255)
  fieldType      FieldType
  dataType       String       @db.VarChar(255)
  value          String
  personalFormId String       @db.Uuid
  PersonalForm   PersonalForm @relation(fields: [personalFormId], references: [personalFormId], onDelete: NoAction, onUpdate: NoAction)
}

model PersonalForm {
  personalFormId String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  signature      String?
  studentId      String    @db.Uuid
  categoryId     String    @db.Uuid
  approvedBy     String?   @db.Uuid
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  deletedAt      DateTime? @db.Timestamptz(6)
  Field          Field[]
  Admin          Admin?    @relation(fields: [approvedBy], references: [adminId], onDelete: NoAction, onUpdate: NoAction)
  Category       Category  @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction)
  Student        Student   @relation(fields: [studentId], references: [studentId], onDelete: NoAction, onUpdate: NoAction)
}

model Student {
  studentId     String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  password      String
  avatar        String?        @default("default-avatar.jpg")
  username      String         @db.VarChar(255)
  major         String         @db.VarChar(255)
  phoneNumber   String?
  gender        Gender
  birthdate     DateTime       @db.Timestamptz(6)
  refreshTokens String[]       @default([])
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  deletedAt     DateTime?      @db.Timestamptz(6)
  studentCode   String         @unique(map: "studentcode_unique")
  PersonalForm  PersonalForm[]
}

enum FieldType {
  OCR_WORD
  OCR_CHAR
  CHECK_BOX
}

enum Gender {
  MALE
  FEMALE
}
